const tasks = [];

function createTask(name, description, deadline = null, requiredRole = null) {
    const task = {
        id: tasks.length + 1,
        name,
        description,
        deadline,
        requiredRole,
        completedBy: [],
    };
    tasks.push(task);
}

function completeTask(userId, taskId) {
    const task = tasks.find((t) => t.id === taskId);
    if (!task) {
        return "‚ùå –ó–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!";
    }

    if (task.completedBy.includes(userId)) {
        return "‚ùå –í–∏ –≤–∂–µ –≤–∏–∫–æ–Ω–∞–ª–∏ —Ü–µ –∑–∞–≤–¥–∞–Ω–Ω—è!";
    }

    task.completedBy.push(userId);
    profiles[userId].completedTasks.push(task);
    profiles[userId].balance += 10; // –ù–∞–≥–æ—Ä–æ–¥–∞ –∑–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
    return `‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è "${task.name}" —É—Å–ø—ñ—à–Ω–æ –≤–∏–∫–æ–Ω–∞–Ω–æ!`;
}

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥ –¥–ª—è –∑–∞–≤–¥–∞–Ω—å
function setupTaskCommands(bot) {
    bot.hears("üìú –ó–∞–≤–¥–∞–Ω–Ω—è", (ctx) => {
        if (tasks.length === 0) {
            return ctx.reply("‚ùå –ó–∞–≤–¥–∞–Ω—å –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î!");
        }

        const taskList = tasks
            .map(
                (t) => `
üìå ${t.name}
üìñ ${t.description}
‚è∞ –î–µ–¥–ª–∞–π–Ω: ${t.deadline || "–ë–µ–∑ –¥–µ–¥–ª–∞–π–Ω—É"}
üéØ –†–æ–ª—å: ${t.requiredRole || "–ë—É–¥—å-—è–∫–∞"}
        `
            )
            .join("\n");

        ctx.reply(`üìú –°–ø–∏—Å–æ–∫ –∑–∞–≤–¥–∞–Ω—å:\n${taskList}`);
    });

    bot.command("complete", (ctx) => {
        const [_, taskId] = ctx.message.text.split(" ");
        const userId = ctx.from.id;

        if (!profiles[userId]) {
            return ctx.reply("‚ùå –í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!");
        }

        const result = completeTask(userId, parseInt(taskId));
        ctx.reply(result);
    });
}

module.exports = { setupTaskCommands, tasks, createTask, completeTask };